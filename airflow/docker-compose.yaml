version: '3'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    image: apache/airflow:2.6.2
    command: webserver
    ports:
      - 8080:8080
    depends_on:
      - postgres
      - redis
      - airflow-init

  airflow-scheduler:
    image: apache/airflow:2.6.2
    command: scheduler
    depends_on:
      - postgres
      - redis
      - airflow-init

  airflow-worker:
    image: apache/airflow:2.6.2
    command: celery worker
    depends_on:
      - postgres
      - redis
      - airflow-init

  airflow-init:
    image: apache/airflow:2.6.2
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Ensure the database is upgraded before any services start
        airflow db upgrade
        
        # Create admin user (optional)
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com

        # Start the webserver to verify it's ready
        exec /entrypoint airflow version
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: always

volumes:
  postgres-db-volume:
